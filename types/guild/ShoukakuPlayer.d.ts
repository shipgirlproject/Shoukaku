import { EventEmitter } from 'events';
import { Base64String, PlayerUpdate, Snowflake, TrackEndEvent, TrackExceptionEvent, TrackStartEvent, WebSocketClosedEvent } from '..';
import { ShoukakuSocket } from '../node/ShoukakuSocket';
import { ShoukakuFilter } from '../struct/ShoukakuFilter';
import { ShoukakuTrack } from '../struct/ShoukakuTrack';
import { ShoukakuConnection } from './ShoukakuConnection';

export class ShoukakuPlayer extends EventEmitter {
  constructor(node: ShoukakuSocket, options: { guildId: Snowflake, shardId: number });

  public connection: ShoukakuConnection;
  public track?: Base64String | null;
  public paused: boolean;
  public position: number;
  public filters: ShoukakuFilter;
  public moveNode(name: string): ShoukakuPlayer;
  public playTrack(input: Base64String | ShoukakuTrack, options?: { noReplace?: boolean, pause?: boolean, startTime?: number, endTime?: number }): ShoukakuPlayer;
  public stopTrack(): ShoukakuPlayer;
  public setPaused(pause?: boolean): ShoukakuPlayer;
  public seekTo(position: number): ShoukakuPlayer;
  public setVolume(volume: number): ShoukakuPlayer;
  public setEqualizer(bands: { band: number, gain: number }[]): ShoukakuPlayer;
  public setKaraoke(values: { level?: number, monoLevel?: number, filterBand?: number, filterWidth?: number } | null): ShoukakuPlayer;
  public setTimescale(values: { speed?: number, pitch?: number, rate?: number } | null): ShoukakuPlayer;
  public setTremolo(values: { frequency?: number, depth?: number } | null): ShoukakuPlayer;
  public setVibrato(values: { frequency?: number, depth?: number } | null): ShoukakuPlayer;
  public setRotation(values: { rotationHz?: number } | null): ShoukakuPlayer;
  public setDistortion(values: { sinOffset?: number, sinScale?: number, cosOffset?: number, cosScale?: number, tanOffset?: number, tanScale?: number, offset?: number, scale?: number } | null): ShoukakuPlayer;
  public setChannelMix(values: { leftToLeft?: number, leftToRight?: number, rightToLeft?: number, rightToRight?: number } | null): ShoukakuPlayer;
  public setLowPass(values: { smoothing?: number } | null): ShoukakuPlayer;
  public setFilters(settings: ShoukakuFilter): ShoukakuPlayer;
  public clearFilters(): ShoukakuPlayer;
  public resume(options?: { noReplace?: boolean, pause?: boolean, startTime?: number, endTime?: number }): ShoukakuPlayer;
  private updateFilters(): void;
  protected clean(): void;
  protected reset(): void;
  protected _onLavalinkMessage(json: Object): void;
  private _onPlayerEvent(json: Object): void;
  private _onWebsocketClosedEvent(json: WebSocketClosedEvent): void;

  public on(event: 'end', listener: (reason: TrackEndEvent) => void): this;
  public on(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;
  public on(event: 'error', listener: (error: Error) => void): this;
  public on(event: 'start', listener: (data: TrackStartEvent) => void): this;
  public on(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;
  public on(event: 'resumed', listener: () => void): this;
  public on(event: 'update', listener: (data: PlayerUpdate) => void): this;
  public once(event: 'end', listener: (reason: TrackEndEvent) => void): this;
  public once(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;
  public once(event: 'error', listener: (error: Error) => void): this;
  public once(event: 'start', listener: (data: TrackStartEvent) => void): this;
  public once(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;
  public once(event: 'resumed', listener: () => void): this;
  public once(event: 'update', listener: (data: PlayerUpdate) => void): this;
  public off(event: 'end', listener: (reason: TrackEndEvent) => void): this;
  public off(event: 'closed', listener: (reason: WebSocketClosedEvent) => void): this;
  public off(event: 'error', listener: (error: Error) => void): this;
  public off(event: 'start', listener: (data: TrackStartEvent) => void): this;
  public off(event: 'exception', listener: (reason: TrackExceptionEvent) => void): this;
  public off(event: 'resumed', listener: () => void): this;
  public off(event: 'update', listener: (data: PlayerUpdate) => void): this;
}
